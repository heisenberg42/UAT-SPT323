#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl7,  liftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, I2C_1,  qEncBL,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  qEncBR,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_3,  qEncFR,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_4,  qEncFL,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_5,  servoEnc,       sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_6,  wristEnc,       sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           wristMot,      tmotorVex393_HBridge, openLoop, reversed, encoderPort, I2C_6)
#pragma config(Motor,  port2,           frontRightMotor, tmotorVex393_MC29, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port3,           frontLeftMotor, tmotorVex393_MC29, openLoop, reversed, driveLeft, encoderPort, I2C_4)
#pragma config(Motor,  port4,           backRightMotor, tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_2)
#pragma config(Motor,  port5,           backLeftMotor, tmotorVex393_MC29, openLoop, driveLeft, encoderPort, I2C_1)
#pragma config(Motor,  port6,           scissorRight,  tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, dgtl7)
#pragma config(Motor,  port7,           scissorLeft,   tmotorVex393_MC29, openLoop, reversed, driveLeft, encoderPort, dgtl7)
#pragma config(Motor,  port8,           impServ,       tmotorVex393_MC29, openLoop, encoderPort, I2C_5)
#pragma config(Motor,  port10,          clawMot,       tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(45)//45 second autonomous section
#pragma userControlDuration(75)//TODO: Get time for user controlled section...

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!


//------------------------------------------------Headers-----------------------------------------------------//

#include "common\move.h"
#include "common\scissor.h"
#include "small\improvServo.h"
#include "small\clawArm.h"

//----------------------------------------------Headers End---------------------------------------------------//

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = false;//true;

  	nMotorEncoder[impServ] = 0;
	nMotorEncoder[clawMot] = 0;

	startTask(manageServo);
	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
  // .....................................................................................
  // Insert user code here.
  // .....................................................................................

	moveRight(12);

	for(int i = 0; i < 2; i++)
	{
		gDesServoAng = 45;
		while(gServoAng < 35);

		gDesWristAng = 180;
		while(gWristAng < 175);

		motor[clawMot] = -75;
		delay(1250);

		gDesServoAng = 15;
		while(gServoAng > 15);

		gDesServoAng = 0;
		while(gServoAng > 0);

		motor[clawMot] = 75;

		delay(1250);

		for(int i = 0; i < 4 * 38; i++)
		{
			gDesServoAng += 1;//38;
			gDesWristAng -= 1;
			//while(gServoAng < gDesServoAng);
			delay(10);
		}

		gDesWristAng = 0;
		delay(250);

		motor[clawMot] = -75;
		delay(1250);
	}
	//gDesServoAng = 90;
	//while(gServoAng < 80);
	//gDesServoAng = 180;


	for(int i = 0; i < 5; i++)
	{

	}
	while(1);

}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////


task usercontrol()
{
	//	moveRight(12);

	//for(int i = 0; i < 2; i++)
	//{
	//	gDesServoAng = 45;
	//	while(gServoAng < 35);

	//	gDesWristAng = 180;
	//	while(gWristAng < 175);

	//	motor[clawMot] = -75;
	//	delay(1250);

	//	gDesServoAng = 15;
	//	while(gServoAng > 15);

	//	gDesServoAng = 0;
	//	while(gServoAng > 0);

	//	motor[clawMot] = 75;

	//	delay(1250);

	//	for(int i = 0; i < 4 * 38; i++)
	//	{
	//		gDesServoAng += 1;//38;
	//		gDesWristAng -= 1;
	//		//while(gServoAng < gDesServoAng);
	//		delay(10);
	//	}

	//	gDesWristAng = 0;
	//	delay(250);

	//	motor[clawMot] = -75;
	//	delay(1250);
	//}

	//while(1);

	startTask(RCMove);
	startTask(scissorRC);
	startTask(clawRC);

	long lTime = 0;

	while(true)
	{
		if((nSysTime - lTime) > (vexRT[Btn8L] ? 10 : 5))
		{
			if(vexRT[Btn6U])
			{
				gDesServoAng += 1;
			}
			if(vexRT[Btn6D])
			{
				gDesServoAng -= 1;
			}


			if(vexRT[Btn5U])
			{
				gDesWristAng += 1;
			}
			if(vexRT[Btn5D])
			{
				gDesWristAng -= 1;
			}

			lTime = nSysTime;
		}
	}
}

//
