#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  rightSonar,     sensorSONAR_mm)
#pragma config(Sensor, dgtl3,  midSonar,       sensorSONAR_mm)
#pragma config(Sensor, dgtl5,  leftSonar,      sensorSONAR_mm)
#pragma config(Sensor, dgtl7,  liftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, I2C_1,  qEncBL,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  qEncBR,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_3,  qEncFR,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_4,  qEncFL,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_5,  servoEnc,       sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port2,           frontRightMotor, tmotorVex393_MC29, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port3,           frontLeftMotor, tmotorVex393_MC29, openLoop, reversed, driveLeft, encoderPort, I2C_4)
#pragma config(Motor,  port4,           backRightMotor, tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_2)
#pragma config(Motor,  port5,           backLeftMotor, tmotorVex393_MC29, openLoop, driveLeft, encoderPort, I2C_1)
#pragma config(Motor,  port6,           scissorRight,  tmotorVex393_MC29, openLoop, driveRight, encoderPort, dgtl7)
#pragma config(Motor,  port7,           scissorLeft,   tmotorVex393_MC29, openLoop, driveLeft, encoderPort, dgtl7)
#pragma config(Motor,  port8,           impServ,       tmotorVex393_MC29, openLoop, encoderPort, I2C_5)
#pragma config(Motor,  port9,           clawMot,       tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(45)//45 second autonomous section
#pragma userControlDuration(120)//TODO: Get time for user controlled section...

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!


//------------------------------------------------Headers-----------------------------------------------------//

#include "common\move.h"
#include "common\pingAlign.h"
#include "common\scissor.h"
#include "small\improvServo.h"
#include "small\clawArm.h"

//----------------------------------------------Headers End---------------------------------------------------//

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
  // .....................................................................................
  // Insert user code here.
  // .....................................................................................


}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////


task usercontrol()
{
	bool rcControl = true;

	long lRCContTogT = 0;

	startTask(RCMove);
	startTask(scissorRC);

	while(true)
	{

	}
}

//
