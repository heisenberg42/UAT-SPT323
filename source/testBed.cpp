#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  rightSonar,     sensorSONAR_cm)
#pragma config(Sensor, dgtl3,  midSonar,       sensorSONAR_cm)
#pragma config(Sensor, dgtl5,  leftSonar,      sensorSONAR_cm)
#pragma config(Sensor, I2C_1,  qEncBL,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  qEncBR,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_3,  qEncFR,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_4,  qEncFL,         sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           frontRightMotor, tmotorVex393_HBridge, openLoop, driveRight, encoderPort, I2C_3)
#pragma config(Motor,  port2,           frontLeftMotor, tmotorVex393_MC29, openLoop, reversed, driveLeft, encoderPort, I2C_4)
#pragma config(Motor,  port8,           backRightMotor, tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_2)
#pragma config(Motor,  port10,          backLeftMotor, tmotorVex393_HBridge, openLoop, driveLeft, encoderPort, I2C_1)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "common\move.h"

long lSonar, mSonar, rSonar;

int speedForw = 0;
int speedRight = 0;
int speedRot = 0;


task main()
{
	bool running = true;
	long lTime = 0;
	//while(true)
	//{
	//	motor[backRightMotor] = 100;
	//	motor[backLeftMotor] = 100;
	//	motor[frontRightMotor] = 100;
	//	motor[frontLeftMotor] = 100;
	//}

	{
		if(vexRT[Btn8D])
		{
			delay(150);
			running = true;
		}

		while(running)
		{
			lSonar = SensorValue[leftSonar];
			mSonar = SensorValue[midSonar];
			rSonar = SensorValue[rightSonar];

			//if(mSonar < 8)// || lSonar < 20 || rSonar < 20)
			//{
			//	speedForw = -55;
			//}
			//else
			//if(mSonar > 11)// && (!(lSonar < 30) && !(rSonar < 30)))
			//{
			//	speedForw += 1 * log(mSonar);
			//}
			//else if(mSonar < 8)
			//{
			//	speedForw += -1 * log(mSonar) - 5;
			//}
			//else
			//{
			//	speedForw = 0;
			//}


			//if(!(mSonar < (lSonar)) || !(mSonar < (rSonar)))// - 20)))
			//{
			//	if((lSonar > (mSonar + 10)) || rSonar < (mSonar - 10))
			//	{
			//		speedRight = 55;
			//	}
			//	else if((rSonar > (mSonar + 10)) || lSonar < (mSonar - 10))
			//	{
			//		speedRight = -55;
			//	}
			//}
			////else if((lSonar < (rSonar - 2)) || (lSonar > (rSonar + 2)))
			////{
			////	if(lSonar > rSonar)
			////	{
			////		speedRight = -45;
			////		speedRot = 35;
			////	}
			////	else if(rSonar > lSonar)
			////	{
			////		speedRight = 45;
			////		speedRot = -35;
			////	}
			////}
			//else
			//{
			//	speedRight = speedRot = 0;
			//}

			//if(((mSonar < (lSonar + 5)) && (mSonar > (lSonar - 5))) || ((mSonar < (rSonar + 5)) && (mSonar > (rSonar - 5))))
			//{
			//	move(0, 0, -60);
			//	delay(150);
			//	move();
			//	continue;
			//}


			//if(lSonar > mSonar && rSonar > mSonar && (lSonar > (mSonar + 20)) && (rSonar > (mSonar + 20)))
			//{

			//}
			speedRight = 0;

	//	if((nSysTime - lTime) >= 100)
			if((lSonar <= mSonar) && (lSonar < rSonar))//((lSonar > (mSonar - 2)) && (lSonar < (mSonar + 2)) && (rSonar > mSonar)) || (lSonar < (mSonar - 1)))//Move left
			{
				speedRight += -5 * log(/*rSonar - */lSonar) - 5;
			}
	//	if((nSysTime - lTime) >= 100)
			else if((rSonar <= mSonar) && (rSonar < lSonar))//((rSonar > (mSonar - 2)) && (rSonar < (mSonar + 2)) && (lSonar > mSonar)) || (rSonar < (mSonar - 1)))//Move right
			{
				speedRight += 5 * log(/*lSonar - */rSonar) + 5;
			}
			//else if((rSonar > mSonar) && (lSonar >= rSonar) && (lSonar < (mSonar + 15)))//Move CCW
			//{
			//	speedRight = 45;
			//	speedRot = -40;
			//}
			//else if((mSonar < lSonar) && (lSonar < rSonar) && (rSonar < (mSonar + 15)))//Move CW
			//{
			//	speedRight = -45;
			//	speedRot = 40;
			//}
			//else
			//{
			//	speedRight = speedRot = 0;

			//	//if(mSonar < 8 || lSonar < 20 || rSonar < 20)
			//	//{
			//	//	speedForw = -50;
			//	//}
			//	//else if(mSonar > 10)// && (!(lSonar < 30) && !(rSonar < 30)))
			//	//{
			//	//	speedForw = 50;
			//	//}
			//	//else
			//	//{
			//	//	speedForw = 0;
			//	//}
			//}

		//	if((nSysTime - lTime) >= 100)
			if(lSonar < mSonar || rSonar < mSonar)
			{
				if(lSonar < rSonar)
				{
					if(lSonar > 11)
						speedForw += 5 * log(mSonar);
					else if(lSonar < 8)
						speedForw += -5 * log(mSonar);
					else
						speedForw = 0;
				}
				else if(rSonar > 11)
					speedForw += 5 * log(mSonar);
				else if(rSonar < 8)
					speedForw += -5 * log(mSonar);
				else
					speedForw = 0;
			}
			else if(mSonar > 11)
				speedForw += 5 * log(mSonar);
			else if(mSonar < 8)
				speedForw += -5 * log(mSonar);
			else
				speedForw = 0;

			if(speedForw < -100)
			{
				speedForw = -100;
			}
			else if(speedForw > 100)
			{
				speedForw = 100;
			}

//		if((nSysTime - lTime) >= 100)
		{
			move(speedRight, speedForw, speedRot);
			delay(100);
			move();
			lTime = nSysTime;
		}
			//move();

			for(int it = 2; it; it--)
			{
				if((mSonar < 11 && mSonar > 7)/* && (lSonar == rSonar)*/ && (lSonar > (mSonar + 20) && rSonar > (mSonar + 20)))
				{
					if(it == 1)
					{
						move(0, 40, 0);
						delay(500);
						move();
						running = false;
					}
				}
				else
					break;
			}
		}
	}
}
